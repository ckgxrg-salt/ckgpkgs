--- a/scripts/codegen.dart
+++ b/scripts/codegen.dart
@@ -2,37 +2,6 @@

 import 'dart:io';

-Future<ProcessResult> getDependencies() async {
-  var process = Process.runSync(
-    "flutter",
-    [
-      "pub",
-      "get",
-    ],
-    runInShell: true,
-  );
-
-  print(process.stdout);
-  print(process.stderr);
-  return process;
-}
-
-Future<ProcessResult> intlUtilsGenerate() async {
-  var process = await Process.run(
-    "flutter",
-    [
-      "pub",
-      "run",
-      "intl_utils:generate",
-    ],
-    runInShell: true,
-  );
-
-  print(process.stdout);
-  print(process.stderr);
-  return process;
-}
-
 Future<List<File>> generateFileLists() async {
   var dir = Directory("lib/generated/l10n");
   if (!dir.existsSync()) {
@@ -86,63 +55,6 @@
   return [sourcesFile, arbFile];
 }

-Future<ProcessResult> generateFromArb(List<File> files) async {
-  var process = await Process.run(
-    "flutter",
-    [
-      "pub",
-      "run",
-      "intl_translation:generate_from_arb",
-      "--sources-list-file",
-      files[0].absolute.path,
-      "--translations-list-file",
-      files[1].absolute.path,
-      "--output-dir=lib/generated/l10n"
-    ],
-    runInShell: true,
-  );
-
-  print(process.stdout);
-  print(process.stderr);
-  return process;
-}
-
-Future<ProcessResult> buildRunner() async {
-  var process = await Process.run(
-    "flutter",
-    [
-      "pub",
-      "run",
-      "build_runner",
-      "build",
-    ],
-    runInShell: true,
-  );
-
-  print(process.stdout);
-  print(process.stderr);
-  return process;
-}
-
 void main() async {
-  var result = await getDependencies();
-  if (result.exitCode != 0) {
-    exit(result.exitCode);
-  }
-
-  result = await intlUtilsGenerate();
-  if (result.exitCode != 0) {
-    exit(result.exitCode);
-  }
-
   var files = await generateFileLists();
-  result = await generateFromArb(files);
-  if (result.exitCode != 0) {
-    exit(result.exitCode);
-  }
-
-  result = await buildRunner();
-  if (result.exitCode != 0) {
-    exit(result.exitCode);
-  }
 }
